#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<unistd.h>
#include<pthread.h>
#include<sys/wait.h>

#define MIN_PID 100
#define MAX_PID 1000
#define NO_OF_P 16    

int p[MAX_PID-MIN_PID]={0};
int assign(void)
{
  int i,flag=1;
  for(i=0;i<MAX_PID-MIN_PID;i++)
  {
   if(p[i]==0)
   {
    p[i]=1;
    flag=0;
    break;
   }
  }
  return flag?-1:i;
}
void release(int j)
{
p[j]=0;
}
void *thread(void *x)
{
int tid=*((int*)x);
int id=assign();

if(id<0)
{
printf("pid's are not avaliable");
}
else
{
printf("Thread [%3d] PID [%3d] Allocated\n",tid,id+MIN_PID);
        //to sleep for a random time between 1-10 seconds
        int r=1+rand()%30;
        sleep(r);

        printf("Thread [%3d] PID [%3d] Released after %d sec\n",tid,id+MIN_PID,r);
        release(id);
    }
    pthread_exit(NULL);
}
int main()
{
int i;
pthread_t pro[NO_OF_P];
srand(time(NULL));
for(i=0;i<NO_OF_P;i++)
{
if(pthread_create(&pro[i],NULL,thread,(void*)&i))
            return -1*printf("error\n");
}
for(i=0; i<NO_OF_P; i++)
        pthread_join(pro[i],NULL);

return 0*printf("\nSUCCESSFUL");
}
